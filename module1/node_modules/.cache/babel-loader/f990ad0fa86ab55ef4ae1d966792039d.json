{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { injected } from '../lib/connectors';\nexport function useEagerConnect() {\n  _s();\n\n  const {\n    activate,\n    active\n  } = useWeb3React();\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]);\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n  return tried;\n}\n\n_s(useEagerConnect, \"GLh+9ege4oFDiozdAF2n3i5tC+o=\", false, function () {\n  return [useWeb3React];\n});\n\nexport function useInactiveListener(suppress = false) {\n  _s2();\n\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3React();\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = chainId => {\n        console.log('chainChanged', chainId);\n        activate(injected);\n      };\n\n      const handleAccountsChanged = accounts => {\n        console.log('accountsChanged', accounts);\n\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      const handleNetworkChanged = networkId => {\n        console.log('networkChanged', networkId);\n        activate(injected);\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n\n    return () => {};\n  }, [active, error, suppress, activate]);\n}\n\n_s2(useInactiveListener, \"tg+LUTCYzAVRTYzC32Q8yta1BMA=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/Users/harshsongra/Documents/Polygon_Academy/starter-kits/src/hooks/index.js"],"names":["useState","useEffect","useWeb3React","injected","useEagerConnect","activate","active","tried","setTried","isAuthorized","then","undefined","catch","useInactiveListener","suppress","error","ethereum","window","on","handleChainChanged","chainId","console","log","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\n\nimport { injected } from '../lib/connectors';\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]);\n\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = (chainId) => {\n        console.log('chainChanged', chainId);\n        activate(injected);\n      };\n\n      const handleAccountsChanged = (accounts) => {\n        console.log('accountsChanged', accounts);\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n\n      const handleNetworkChanged = (networkId) => {\n        console.log('networkChanged', networkId);\n        activate(injected);\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n\n    return () => {};\n  }, [active, error, suppress, activate]);\n}\n"]},"metadata":{},"sourceType":"module"}