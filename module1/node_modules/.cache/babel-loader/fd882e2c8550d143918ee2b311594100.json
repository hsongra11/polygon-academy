{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\n\nrequire('dotenv').config();\n\nconst supportChainIdList = [1, 3, 4, 5, 42, 137, 1337, 80001];\n\nconst getRpcEndpoint = chainId => {\n  const endpoints = {\n    1: 'mainnet',\n    3: 'ropsten',\n    4: 'rinkeby',\n    5: 'goerli',\n    42: 'kovan',\n    137: 'polygon',\n    80001: 'mumbai'\n  };\n  return `https://${endpoints[chainId] || 'mainnet'}.infura.io/v3/c9d981d1a6814120a7cf4c76b7455edc` || process.env.INFURA_ID;\n};\n\nconst rpcEndpointList = supportChainIdList.reduce((accumulator, currentValue) => ({ ...accumulator,\n  [currentValue]: getRpcEndpoint(currentValue)\n}), {}); // reset WalletConnect connector\n\nexport const resetWalletConnectConnector = connector => {\n  var _connector$walletConn, _connector$walletConn2;\n\n  if (connector && connector instanceof WalletConnectConnector && ((_connector$walletConn = connector.walletConnectProvider) === null || _connector$walletConn === void 0 ? void 0 : (_connector$walletConn2 = _connector$walletConn.wc) === null || _connector$walletConn2 === void 0 ? void 0 : _connector$walletConn2.uri)) {\n    connector.walletConnectProvider = undefined;\n  }\n};\nexport const injected = new InjectedConnector({\n  supportedChainIds: supportChainIdList\n});\nexport const walletconnect = new WalletConnectConnector({\n  rpc: rpcEndpointList,\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 12000\n});\nexport const walletlink = new WalletLinkConnector({\n  url: getRpcEndpoint(1),\n  appName: 'Create React Ethereum DApp',\n  supportedChainIds: [1]\n});\nexport const connectorList = {\n  MetaMask: injected,\n  WalletConnect: walletconnect,\n  WalletLink: walletlink\n};\nexport default connectorList;","map":{"version":3,"sources":["/Users/harshsongra/Documents/Polygon_Academy/starter-kits/src/lib/connectors/index.js"],"names":["InjectedConnector","WalletConnectConnector","WalletLinkConnector","require","config","supportChainIdList","getRpcEndpoint","chainId","endpoints","process","env","INFURA_ID","rpcEndpointList","reduce","accumulator","currentValue","resetWalletConnectConnector","connector","walletConnectProvider","wc","uri","undefined","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","walletlink","url","appName","connectorList","MetaMask","WalletConnect","WalletLink"],"mappings":"AAAA,SAAQA,iBAAR,QAAgC,gCAAhC;AACA,SAAQC,sBAAR,QAAqC,qCAArC;AACA,SAAQC,mBAAR,QAAkC,kCAAlC;;AAEAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,kBAAkB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,GAAjB,EAAsB,IAAtB,EAA4B,KAA5B,CAA3B;;AAEA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAClC,QAAMC,SAAS,GAAG;AAChB,OAAG,SADa;AAEhB,OAAG,SAFa;AAGhB,OAAG,SAHa;AAIhB,OAAG,QAJa;AAKhB,QAAI,OALY;AAMhB,SAAK,SANW;AAOhB,WAAO;AAPS,GAAlB;AAUA,SAAQ,WACRA,SAAS,CAACD,OAAD,CAAT,IAAsB,SACrB,gDAFM,IAE6CE,OAAO,CAACC,GAAR,CAAYC,SAFhE;AAGD,CAdD;;AAgBA,MAAMC,eAAe,GAAGP,kBAAkB,CAACQ,MAAnB,CACxB,CAACC,WAAD,EAAcC,YAAd,MAAgC,EAC9B,GAAGD,WAD2B;AAE9B,GAACC,YAAD,GAAgBT,cAAc,CAACS,YAAD;AAFA,CAAhC,CADwB,EAKxB,EALwB,CAAxB,C,CAQA;;AACA,OAAO,MAAMC,2BAA2B,GAAIC,SAAD,IAAe;AAAA;;AACxD,MACAA,SAAS,IACTA,SAAS,YAAYhB,sBADrB,8BAEAgB,SAAS,CAACC,qBAFV,oFAEA,sBAAiCC,EAFjC,2DAEA,uBAAqCC,GAFrC,CADA,EAIE;AACAH,IAAAA,SAAS,CAACC,qBAAV,GAAkCG,SAAlC;AACD;AACF,CARM;AAUP,OAAO,MAAMC,QAAQ,GAAG,IAAItB,iBAAJ,CAAsB;AAC5CuB,EAAAA,iBAAiB,EAAElB;AADyB,CAAtB,CAAjB;AAKP,OAAO,MAAMmB,aAAa,GAAG,IAAIvB,sBAAJ,CAA2B;AACtDwB,EAAAA,GAAG,EAAEb,eADiD;AAEtDc,EAAAA,MAAM,EAAE,kCAF8C;AAGtDC,EAAAA,MAAM,EAAE,IAH8C;AAItDC,EAAAA,eAAe,EAAE;AAJqC,CAA3B,CAAtB;AAOP,OAAO,MAAMC,UAAU,GAAG,IAAI3B,mBAAJ,CAAwB;AAChD4B,EAAAA,GAAG,EAAExB,cAAc,CAAC,CAAD,CAD6B;AAEhDyB,EAAAA,OAAO,EAAE,4BAFuC;AAGhDR,EAAAA,iBAAiB,EAAE,CAAC,CAAD;AAH6B,CAAxB,CAAnB;AAMP,OAAO,MAAMS,aAAa,GAAG;AAC3BC,EAAAA,QAAQ,EAAEX,QADiB;AAE3BY,EAAAA,aAAa,EAAEV,aAFY;AAG3BW,EAAAA,UAAU,EAAEN;AAHe,CAAtB;AAMP,eAAeG,aAAf","sourcesContent":["import {InjectedConnector} from '@web3-react/injected-connector';\nimport {WalletConnectConnector} from '@web3-react/walletconnect-connector';\nimport {WalletLinkConnector} from '@web3-react/walletlink-connector';\n\nrequire('dotenv').config();\n\nconst supportChainIdList = [1, 3, 4, 5, 42, 137, 1337, 80001];\n\nconst getRpcEndpoint = (chainId) => {\n  const endpoints = {\n    1: 'mainnet',\n    3: 'ropsten',\n    4: 'rinkeby',\n    5: 'goerli',\n    42: 'kovan',\n    137: 'polygon',\n    80001: 'mumbai',\n  };\n\n  return `https://${\n  endpoints[chainId] || 'mainnet'\n  }.infura.io/v3/c9d981d1a6814120a7cf4c76b7455edc` || process.env.INFURA_ID;\n};\n\nconst rpcEndpointList = supportChainIdList.reduce(\n(accumulator, currentValue) => ({\n  ...accumulator,\n  [currentValue]: getRpcEndpoint(currentValue),\n}),\n{}\n);\n\n// reset WalletConnect connector\nexport const resetWalletConnectConnector = (connector) => {\n  if (\n  connector &&\n  connector instanceof WalletConnectConnector &&\n  connector.walletConnectProvider?.wc?.uri\n  ) {\n    connector.walletConnectProvider = undefined;\n  }\n};\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: supportChainIdList,\n});\n\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: rpcEndpointList,\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 12000,\n});\n\nexport const walletlink = new WalletLinkConnector({\n  url: getRpcEndpoint(1),\n  appName: 'Create React Ethereum DApp',\n  supportedChainIds: [1],\n});\n\nexport const connectorList = {\n  MetaMask: injected,\n  WalletConnect: walletconnect,\n  WalletLink: walletlink,\n};\n\nexport default connectorList;\n"]},"metadata":{},"sourceType":"module"}